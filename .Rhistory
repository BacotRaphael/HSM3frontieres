str_remove_all(table_output$data, sel_mul_remove_rgx),
table_output$data)
}
# Getting question labels if requested
if (labels) {
if (is.null(language)) {
label_col <- "label"
} else {
cols <- names(questionnaire)
label_col <- str_detect(cols, paste0("label[\\W]{2}(?i)", language))
label_col <- cols[label_col]
}
choice_indices <- match(table_output$data, choices$name)
choice_labels <- choices[[label_col]]
question_indices <- match(table_output$data, questionnaire$name)
question_labels <- questionnaire[[label_col]]
table_output <- table_output %>%
mutate(data = ifelse(is.na(choice_indices),
data,
choice_labels[choice_indices]),
data = ifelse(is.na(question_indices),
data,
ifelse(is.na(question_labels[question_indices]) | question_labels[question_indices] == "",
data,
question_labels[question_indices]))
)
#Fixing select multiple labels
if(length(sel_mul)>0){
sel_mul_indices <- match(sel_mul, questionnaire$name)
for (i in 1:length(sel_mul_indices)) {
table_output[,1] <- str_replace(table_output$data, paste0(questionnaire$name[sel_mul_indices[i]],"\\b"), question_labels[sel_mul_indices[i]])
}
}
}
# Cleaning rows with question names
split_rows <- table_output[,2] == main_col_name
table_output[split_rows, 2:ncol(table_output)] <- ""
return(table_output)
}
strata_output <- table_maker(data_to_analyze2,
questionnaire,
survey,
choices,
weighting_function = NULL,
labels = T,
language = "French",
main_col_name = "Overall",
"admin1"
)
View(strata_output)
data_to_analyze2<-  db %>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,starts_with("strat_survie"),marche_maintenant) %>%
filter(info_pays=="mali")
data_to_analyze2<-  db %>%filter(info_pays=="mali")%>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,starts_with("strat_survie"),marche_maintenant)
strata_output <- table_maker(data_to_analyze2,
questionnaire,
survey,
choices,
weighting_function = NULL,
labels = T,
language = "French",
main_col_name = "Overall",
"admin1"
)
View(strata_output)
db <- read.csv("C:/Users/Admin/Downloads/Agg_REG_1903B_3F-20210227-133726.csv")
View(db)
text <- filter(survey, str_detect(type, "(\\btext\\b)|(\\bnote\\b)"))$name
data_to_analyze2<-  db %>%filter(info_pays=="mali")%>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,starts_with("strat_survie"),marche_maintenant)
View(db)
db <- read.delim("C:/Users/Admin/Downloads/Agg_REG_1903B_3F-20210225-100759.csv")
View(db)
data_to_analyze2<-  db %>%filter(info_pays=="mali")%>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,starts_with("strat_survie"),marche_maintenant)
strata_output <- table_maker(data_to_analyze2,
questionnaire,
survey,
choices,
weighting_function = NULL,
labels = T,
language = "French",
main_col_name = "Overall",
"admin1"
)
View(strata_output)
rm(list = ls())
devtools::load_all()
H2R_HSM()
select_percents
H2R_HSM()
db <- read.csv("C:/Users/Admin/Desktop/Nouveau dossier/xml3f.csv")
View(db)
library(readxl)
survey <- read_excel("C:/Users/Admin/Desktop/Nouveau dossier/REACH REG1903b 3F - Outil multisectoriel_2021-01.xlsx")
View(survey)
library(readxl)
choices <- read_excel("C:/Users/Admin/Desktop/Nouveau dossier/REACH REG1903b 3F - Outil multisectoriel_2021-01.xlsx",
sheet = "choices")
View(choices)
db %>% select_percents(pdi_raison,1,.,survey,choices,"label::French (fr)")
db %>% select_percents(pdi_raison,1,.,survey,choices,"label::French (fr)")
db %>% summarise(select_percents(pdi_raison,1,.,survey,choices,"label::French (fr)"))
db %>% summarise(select_percents(pdi_raison,1,.,survey,choices,"label","label::French (fr)"))
debugonce(select_percents)
db %>% summarise(select_percents(pdi_raison,1,.,survey,choices,"label","label::French (fr)"))
is.null(x_name)
x_name <- deparse(substitute(x))
group_var <- group_vars(df)
!is.null(group) & nrow(df) == length(x)
x <- x[!is.na(x)]
length(x) == 0
# Getting choices and labels
l_name <- filter(survey_sheet, name == x_name)$type
l_name
l_name <- str_remove(l_name, "(select_one |select_multiple )")
l_name
choices <- filter(choice_sheet, list_name == l_name)$name
choices
!is.null(language)
# cols <- names(choice_sheet)
# col <- str_detect(cols, paste0("label[\\W]{2}(?i)", language))
# col <- cols[col]
col <- language
col
labels <- filter(choice_sheet, list_name == l_name)[[col]]
labels
# finding instances of choice options
choice_rgx <- str_c("\\b", choices, "\\b")
choice_rgx
counts <- map_dbl(choice_rgx, ~sum(str_count(x, .x)))
counts
choices$list_name %>% unique
View(choices)
list_name<-choices$list_name %>% unique
replicate(length(list_name),"SL")
name<-replicate(length(list_name),"SL")
label<-replicate(length(list_name),"SL")
addchoices<-data.frame(
list_name=list_name,
name=name,
label=label
)
choices<-bind_rows(choices,addchoices)
db %>% summarise(pdi_raison,1,.,survey,choices,"label","label::French (fr)")
View(choices)
db %>% summarise(pdi_raison,1,.,survey,choices,"label","label::French (fr)")
db %>% summarise(select_percents(pdi_raison,1,.,survey,choices,"label","label::French (fr)"))
db$pdi_raison %>% unique
db <- read.csv("C:/Users/Admin/Downloads/Agg_REG_1903B_3F-20210227-183338.csv")
View(db)
db$pdi_raison %>% unique
table(db$pdi_raison)
db %>% summarise(select_percents(pdi_raison,1,.,survey,choices,"label","label::French (fr)"))
db %>% summarise(select_percents(pdi_raison,2,.,survey,choices,"label","label::French (fr)"))
db %>% summarise(select_percents(pdi_raison,1,.,survey,choices,"label","label::French (fr)"))
View(choices)
which(choices$name=="SL")
choices$`label::French (fr)`[which(choices$name=="SL")] <-"SL"
View(choices)
db %>% summarise(select_percents(pdi_raison,1,.,survey,choices,"label","label::French (fr)"))
rm(list = ls())
devtools::load_all()
H2R_HSM()
rsconnect::deployApp(appDir = ".", account = "impact-initiatives", forceUpdate = T)
hypegrammaR::load_analysisplan
hypegrammaR:::assert_valid_analysisplan
hypegrammaR:::load_samplingframe
hypegrammaR::map_to_weighting
db <- read.csv("C:/Users/Admin/Downloads/Agg_REG_1903B_3F-20210227-183338.csv")
View(db)
library(readxl)
survey <- read_excel("C:/Users/Admin/Desktop/Nouveau dossier/REACH REG1903b 3F - Outil multisectoriel_2021-01.xlsx")
View(survey)
library(readxl)
choices <- read_excel("C:/Users/Admin/Desktop/Nouveau dossier/REACH REG1903b 3F - Outil multisectoriel_2021-01.xlsx",
sheet = "choices")
View(choices)
library(tidyverse)
library(questionr)
dm <- db %>% select(admin1,pdi_raison,groupes_presents,reste_raison,nourriture_source,strat_survie,marche_maintenant,pas_nourriture_raison,marche_raison,
distr_nourriture,cereal_prix_augmente,revenu_source)
source('C:/Users/Admin/Desktop/Hedi/github/HSM3frontieres/R/table_function.R')
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
library(crayon)
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
View(dmres)
dm$pdi_raison
View(choices)
source('C:/Users/Admin/Desktop/Hedi/github/HSM3frontieres/R/table_function.R')
debugonce(table_maker)
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
strata
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
sel_mul
!is.null(strata)
analysis_names <- names(select(data, -one_of(strata)))
# detect which are in the questionnaire
in_questionnaire <- analysis_names %in% questionnaire$name
table_output <- bind_rows(map2(analysis_names,
in_questionnaire,
analyzer,
data,
weighting_function,
main_col_name,
strata))
View(table_output)
sel_mul_rgx <- paste0(sel_mul, "(\\/|\\.)")
sel_mul_extract_rgx <- paste0("(", str_c(sel_mul, collapse = "|"), ")")
sel_mul_remove_rgx <- paste0("(", str_c(sel_mul_rgx, collapse = "|"), ")")
sel_mul_remove_rgx
table_output <- table_output %>%
mutate(sel_mul = str_extract(data, sel_mul_extract_rgx))
View(table_output)
str_extract(data, sel_mul_extract_rgx)
View(table_output)
table_output %>%
mutate(sel_mul = str_extract(data, sel_mul_extract_rgx))
str_extract(table_output$data, sel_mul_extract_rgx)
source('C:/Users/Admin/Desktop/Hedi/github/HSM3frontieres/R/table_function.R')
dm <- db %>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,
starts_with("strat_survie"),marche_maintenant,
starts_with("pas_nourriture_raison"),marche_raison,
distr_nourriture,cereal_prix_augmente,
starts_with("revenu_source"))
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
debugonce(table_maker)
dmres<-table_maker(data = filter(dm,info_pays=="mali"),questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
dm <- db %>% filter(info_pays=="mali")  %>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,
starts_with("strat_survie"),marche_maintenant,
starts_with("pas_nourriture_raison"),marche_raison,
distr_nourriture,cereal_prix_augmente,
starts_with("revenu_source"))
debugonce(table_maker)
dmres<-table_maker(data = filter(dm,info_pays=="mali"),questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
db %>% filter(info_pays=="mali")
dm <- db %>% filter(info_pays=="mali")
dm <- db %>% filter(info_pays=="mali")  %>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,
starts_with("strat_survie"),marche_maintenant,
starts_with("pas_nourriture_raison"),marche_raison,
distr_nourriture,cereal_prix_augmente,
starts_with("revenu_source"))
debugonce(table_maker)
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
# collecting strata information
strata <- list(...)
strata <- strata[!is.na(strata)]
strata <- unlist(strata)
# remove the text column for select multiple
sel_mul <- filter(questionnaire, str_detect(type, "select_multiple"))$name
data <- select(data, -one_of(sel_mul))
analysis_names <- names(select(data, -one_of(strata)))
# detect which are in the questionnaire
in_questionnaire <- analysis_names %in% questionnaire$name
table_output <- bind_rows(map2(analysis_names,
in_questionnaire,
analyzer,
data,
weighting_function,
main_col_name,
strata))
debugonce(analyzer)
table_output <- bind_rows(map2(analysis_names,
in_questionnaire,
analyzer,
data,
weighting_function,
main_col_name,
strata))
strata <- list(...)
strata <- strata[!is.na(strata)]
data <- filter(data, !is.na(!!sym(x)))
weights <- rep(1, nrow(data))
x_data <- data[[x]]
class(x_data) %in% c("logical", "numeric", "integer")
min(x_data) >= 0 & max(x_data) <= 1
table <- wtd.table(x_data, rep(1, length(x_data)), weights = weights)
table
table <- prop(table)
table <- as.data.frame.matrix(table)
table[,1] <- row.names(table)
table <- table[-nrow(table),]
table <- table[order(as.numeric(table[,ncol(table)]),
decreasing = T), c(1, ncol(table))] %>%
mutate(Total = round(Total, 1))
table <- rbind(c(x, main_col_name), table)
table <- as.data.frame(table)
names(table) <- c("data", main_col_name)
table
length(strata) > 0
source('C:/Users/Admin/Desktop/Hedi/github/HSM3frontieres/R/table_function.R')
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
text <- filter(survey, str_detect(type, "(\\btext\\b)|(\\bnote\\b)"))$name
dm<-dm %>% select(-one_of(text))
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
View(dmres)
rec_missing<-function(x,missings=c(NULL,'NULL','N/A','n/a',999,998,888,' ','(vide)','d/m','','NA','na',""," ")) {
x[x %in% missings] <- NA
return(x)
}
rec_missing<-function(x,missings=c(NULL,'NULL','N/A','n/a',999,998,888,' ','(vide)','d/m','','NA','na',""," ","NC","SL")) {
x[x %in% missings] <- NA
return(x)
}
rec_missing_all<-function(data){lapply(data,rec_missing) %>% bind_cols}
cleanheaders<-function(data,slashtodot){
if(slashtodot){
names(data)<-gsub("^X_","",names(data))
names(data)<-gsub("^_","",names(data))
names(data)<-gsub("\\/",".",names(data))
} else {
names(data)<-gsub("^X_","",names(data))
names(data)<-gsub("^_","",names(data))
}
return(data)}
prepdata<-function(data,slashtodot){data %>% cleanheaders(.,slashtodot) %>% rec_missing_all %>% remove_blank_headings %>% type_convert}
dm <- db  %>% prepdata(.,T)%>% filter(info_pays=="mali")  %>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,
starts_with("strat_survie"),marche_maintenant,
starts_with("pas_nourriture_raison"),marche_raison,
distr_nourriture,cereal_prix_augmente,
starts_with("revenu_source"))
remove_blank_headings<-function(data){data[,names(data)!=""]}
dm <- db  %>% prepdata(.,T)%>% filter(info_pays=="mali")  %>% select(admin1,pdi_raison,starts_with("groupes_presents"),reste_raison,nourriture_source,
starts_with("strat_survie"),marche_maintenant,
starts_with("pas_nourriture_raison"),marche_raison,
distr_nourriture,cereal_prix_augmente,
starts_with("revenu_source"))
dm<-dm %>% select(-one_of(text))
dmres<-table_maker(data = dm,questionnaire = survey,choices = choices,weighting_function = NULL,labels = T,language = "French",main_col_name = "Overall", "admin1")
View(dmres)
write.csv(dmres, "dm.csv", row.names = T)
read_all_csv<-function(folder){
filenames<-list.files(path = folder,recursive = T)
filenames<-paste0(folder,filenames)
filenames<-grep("\\.csv$",filenames,value = TRUE)
dfs<-map(filenames,read.csv)
names(dfs)<-filenames
dfs
}
allaudit<-read_all_csv("audit")
list.files(path = "audit",recursive = T)
allaudit<-read_all_csv("audit/")
View(allaudit)
lapply(allaudit, function(x) {
x$node<-remove_text_between_slashes(audit$node)
})
remove_text_between_slashes <- function(expression) {
sub("/.*/","",expression)
}
lapply(allaudit, function(x) {
x$node<-remove_text_between_slashes(audit$node)
})
lapply(allaudit, function(x) {
x$node<-remove_text_between_slashes(x$node)
})
allaudit<-read_all_csv("audit/") %>%
lapply(allaudit, function(x) {
x$node<-remove_text_between_slashes(x$node)
})
allaudit<-read_all_csv("audit/") %>%
lapply(., function(x) {
x$node<-remove_text_between_slashes(x$node)
})
View(allaudit)
allaudit<-read_all_csv("audit/")
allaudit2<-lapply(, function(x) {
x$node<-remove_text_between_slashes(x$node)
})
allaudit2<-lapply(allaudit, function(x) {
x$node<-remove_text_between_slashes(x$node)
})
View(allaudit2)
allaudit2<-lapply(allaudit, function(x) {
x$node<-remove_text_between_slashes(x$node)
return(x)
})
View(allaudit2)
allaudit2$`audit/0217500a-8a0c-4848-b039-17093d548230/audit.csv`
calculate_survey_duration <- function(endtime, startime){
as.numeric(round(sum(((endtime - startime)/60000),na.rm = T),digits = 2))
}
lapply(allaudit2, function(x){
calculate_survey_duration(x$end[audit$event =="question" | x$event =="group questions"],
x$start[audit$event =="question" | x$event =="group questions"])
})
lapply(allaudit2, function(x){
calculate_survey_duration(x$end[x$event =="question" | x$x =="group questions"],
x$start[x$event =="question" | x$x =="group questions"])
})
lapply(allaudit2, function(x){
calculate_survey_duration(x$end[x$event =="question" | x$event =="group questions"],
x$start[x$event =="question" | x$event =="group questions"])
})
lapply(allaudit2, function(x){
calculate_survey_duration(x$end[x$event =="question" | x$event =="group questions"],
x$start[x$event =="question" | x$event =="group questions"])
}) %>% unlist()
View(allaudit)
read_all_csv<-function(folder){
filenamesuuid<-list.files(path = folder,recursive = T)
filenames<-paste0(folder,filenames)
filenames<-grep("\\.csv$",filenames,value = TRUE)
dfs<-map(filenames,read.csv)
names(dfs)<-filenamesuuid
dfs
}
allaudit<-read_all_csv("audit/")
read_all_csv<-function(folder){
filenamesuuid<-list.files(path = folder,recursive = T)
filenames<-paste0(folder,filenamesuuid)
filenames<-grep("\\.csv$",filenames,value = TRUE)
dfs<-map(filenames,read.csv)
names(dfs)<-filenamesuuid
dfs
}
allaudit<-read_all_csv("audit/")
sub(".*/","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/$","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub("$.*/","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*$/","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/^","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/^","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/\\","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/\\$","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/(.*)/.*","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/(.*)/.*","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
sub(".*/(.*)/.*","","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv/")
sub(".*/(.*)/.*","\\1","audit/ff939816-0fcd-427a-911c-819e23295b34/audit.csv")
read_all_csv<-function(folder){
filenames<-list.files(path = folder,recursive = T)
filenames<-paste0(folder,filenames)
filenames<-grep("\\.csv$",filenames,value = TRUE)
dfs<-map(filenames,read.csv)
names(dfs)<-sub(".*/(.*)/.*","\\1",filenames)
dfs
}
allaudit<-read_all_csv("audit/")
View(allaudit)
allaudit2<-lapply(allaudit, function(x) {
x$node<-remove_text_between_slashes(x$node)
return(x)
})
View(allaudit2)
lapply(allaudit2, function(x){
calculate_survey_duration(x$end[x$event =="question" | x$event =="group questions"],
x$start[x$event =="question" | x$event =="group questions"])
}) %>% unlist()
lapply(allaudit2, function(x){
form_lifetime(x$end, x$start)
}) %>% unlist()
#form lifetime from start to end, save and exit
form_lifetime <- function(endtime, startime){
as.numeric(round((tail(endtime[!is.na(endtime)],1) - startime[1])/60000,digits = 2))
}
lapply(allaudit2, function(x){
form_lifetime(x$end, x$start)
}) %>% unlist()
# time spent on GPS/comme,taire/merci
lapply(allaudit2, function(x){
calculate_survey_duration(audit$end[audit$node %in% c("q0_gps","commentaires","merci")],
audit$start[audit$node %in% c("q0_gps","commentaires","merci")])
}) %>% unlist()
# time spent on GPS/comme,taire/merci
lapply(allaudit2, function(x){
calculate_survey_duration(x$end[x$node %in% c("q0_gps","commentaires","merci")],
x$start[x$node %in% c("q0_gps","commentaires","merci")])
}) %>% unlist()
# time spent answering questions
time_spent_questions<-lapply(allaudit2, function(x){
calculate_survey_duration(x$end[x$event %in% c("question","group questions")],
x$start[x$event %in% c("question","group questions")])
}) %>% unlist()
# from start of survey to save and exit
form_lifetime<-lapply(allaudit2, function(x){
form_lifetime(x$end, x$start)
}) %>% unlist()
# time spent on GPS/comme,taire/merci
gps_comm_merci<-lapply(allaudit2, function(x){
calculate_survey_duration(x$end[x$node %in% c("q0_gps","commentaires","merci")],
x$start[x$node %in% c("q0_gps","commentaires","merci")])
}) %>% unlist()
#time spent answering question excluding gps/commenatire/merci
real_duration<-time_spent_questions-gps_comm_merci
real_duration
data.frame(form_lifetime=form_lifetime,
time_spent_questions=time_spent_questions,
real_duration=real_duration)
data.frame(form_lifetime=form_lifetime,
time_spent_questions=time_spent_questions,
real_duration=real_duration) %>% write.csv("audit.csv", row.names = F)
data.frame(form_lifetime=form_lifetime,
time_spent_questions=time_spent_questions,
real_duration=real_duration) %>% write.csv("audit.csv", row.names = T)
rsconnect::deployApp(appDir = ".", account = "impact-initiatives", forceUpdate = T)
