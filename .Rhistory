H2R_HSM()
H2R_HSM()
H2R_HSM()
devtools::load_all()
library(shiny)
H2R_HSM()
devtools::load_all()
H2R_HSM()
H2R_HSM()
db <- read.csv("C:/Users/Admin/Desktop/Nouveau dossier/3F 02-2021/3f_xml_02_2021.csv")
View(db)
apply_checks<-function(db, pays){
logbook<-data.frame(
today=character(),
base= character(),
enumerator= character(),
uuid= character(),
question.name = character(),
old.value = character(),
new.value = character(),
parent.other.question = character(),
parent.other.answer = character(),
probleme = character(),
checkid= character(),
action=character()
)
sm_autre <- names(db)[grep(".[.]autre", names(db))]
sm_nsp <- names(db)[grep(".[.](nsp|ne_sait_pas|je_ne_sais_pas)", names(db))]
sm_dwta <- names(db)[grep(".[.](prefere_pas|ne_souhaite_pas_repondre|je_prefere_ne_pas_repondre|sans_reponse)", names(db))]
# new variables
data<-db
data$difftime<-calc_duration(data)
##Transversal (nsp)
data$nb_nsp <-apply(data,1,function(x) {grep("nsp|ne_sait_pas|je_ne_sais_pas",x) %>%  unlist %>% length}) +apply(data[sm_nsp],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_nsp>3)
logbook<- makeslog(data,logbook,"id02",index, "nb_nsp", "Nombre important de reponses nsp par enqueteur")
##Transversal (sans_reponse)
data$nb_dwta <-apply(data,1,function(x) {grep("prefere_pas|sans_reponse",x) %>%  unlist %>% length}) +apply(data[sm_dwta],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_dwta>3)
logbook<- makeslog(data,logbook,"id03",index, "nb_dwta", "Nombre important de reponses sans_reponse par enqueteur")
##Transversal (autre)
data$nb_autre <-apply(data,1,function(x) {grep("autre",x) %>%  unlist %>% length}) + apply(data[sm_autre],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_autre>3)
logbook<- makeslog(data,logbook,"id04",index, "nb_autre", "Nombre important de reponses autre par enqueteur")
# consentement suppression
index<-pulluuid(data,data$consensus_note=="non")
logbook<- makeslog(data,logbook,"id05",index,"consensus_note","pas de consentement pour enquete",action = "remove")
##duree d'enquete ne depasse pas quinze minte
index<-pulluuid(data,data$difftime< 20)
logbook<- makeslog(data,logbook,"id06",index,"difftime","enquete plus courte que 20min")
##duree d'enquete ne depasse pas vingt minutes
# index<-pulluuid(data,data$difftime> 15 & data$difftime<=20)
# logbook<- makeslog(data,logbook,"id07",index,"difftime","enquete plus courte que 20min")
##duree d'enquete depasse 110mins
index<-pulluuid(data,data$difftime> 110)
logbook<- makeslog(data,logbook,"id08",index,"difftime","enquete plus long que 110min")
##manque de pluie dans une saison seche
index<-pulluuid(data, composr::sm_selected(data$activite_agricole_perturbe,any = c("manque_pluie")))
logbook<-makeslog(data,logbook,"id09",index,"activite_agricole_perturbe","manque de pluie dans une saison seche et agriculture contre saison",NA)
## pas d'acces a des services d'edu /vacances scolaire
index<-pulluuid(data, data$edu_raisons=="vacances")
logbook<-makeslog(data,logbook,"id10",index,"edu_raisons","s'agit-il bien des vacances ? Est-ce que y a des localites dans lesquelles jusqu'ici les eleves sont en vacances?")
index<-pulluuid(data, data$abris_destruction_raison=="inondations")
logbook<-makeslog(data,logbook,"id11",index,"abris_destruction_raison","S'agit-il d'inondation causee par la crue d'un cours d'eau ou les eaux de pluies, au cours des 30 derniers jours?")
temp<-data %>% group_by(deviceid) %>% summarise(n=n_distinct(global_enum_id)) %>% mutate(check=n>1)
index<-pulluuid(data, data$deviceid%in% temp$deviceid[which(temp$check==T)])
logbook<-makeslog(data,logbook,"id12",index,"global_enum_id","Meme identifiant de smartephone mais differents numeros d'enqueteurs")
index<-pulluuid(data, data$ic_age>50&data$profession_ic=="etudiant")
logbook<-makeslog(data,logbook,"id13",index,"ic_age","Un informateur cle qui a plus de 50 avec comme profil etudiant")
index<-pulluuid(data, composr::sm_selected(data$groupes_presents,any = c("refugie"))&data$refugies_source_admin0==pays)
logbook<-makeslog(data,logbook,"id14",index,"groupes_presents",paste0("Pays d'origine des réfugiés ",pays))
index<-pulluuid(data, composr::sm_selected(data$groupes_presents,none = c("non_deplaces","retourne","rapatrie")))
logbook<-makeslog(data,logbook,"id15",index,"groupes_presents","Groupe de population present dans la localite uniquement PDI et / ou Réfugie")
temp<-c("acces_sante","acces_edu","acces_marche","acces_eau")
index<-pulluuid(data, grepl(paste(temp,collapse = "|"),data$pdi_raison))
logbook<-makeslog(data,logbook,"id16",index,"pdi_raison","Raison de deplacement des populations qui peut ne pas avoir un caractere force, qui peut etre liee a une saison ou un besoin specifique")
index<-pulluuid(data, grepl(paste(temp,collapse = "|"),data$refugies_raison))
logbook<-makeslog(data,logbook,"id17",index,"refugies_raison","Raison de deplacement des populations qui peut ne pas avoir un caractere force, qui peut etre liee à une saison ou un besoin specifique")
index<-pulluuid(data, composr::sm_selected(data$pas_nourriture_raison, any = c("pas_marche"))&data$marche_maintenant=="oui")
logbook<-makeslog(data,logbook,"id18",index,"pas_nourriture_raison","presence d'un marche fonctionnel mais raison non acces a suffisamment de nourriture est : Le marche ne fonctionne pas")
index<-pulluuid(data, composr::sm_selected(data$pas_nourriture_raison, any = c("marche_limite"))&data$marche_maintenant=="non")
logbook<-makeslog(data,logbook,"id19",index,"pas_nourriture_raison","Pas de marche fonctionnel a distance de marche mais raison non acces a suffisamment de nourriture est : Le marche existe mais la disponibilite des produits est limitee")
permanenet<-c("permanent","concession")
temp<-c("paille","abri_transition","abri_fortune","abri_urgence","rhu","batiment_public","ecole","batiment_abandonne","construction","aucun")
index<-pulluuid(data, data$pdi_abris_type1%in%permanenet&data$cl_abris_type1%in%temp)
logbook<-makeslog(data,logbook,"id20",index,"pdi_abris_type1","Maison construite en dur mais le type d'abri des populations non deplacees est un autre type")
index<-pulluuid(data, data$rf_abris_type1%in%permanenet&data$cl_abris_type1%in%temp)
logbook<-makeslog(data,logbook,"id20",index,"rf_abris_type1","Maison construite en dur mais le type d'abri des populations non deplacees est un autre type")
index<-pulluuid(data, data$marche_maintenant=="non"&data$besoin_bna=="aucun")
logbook<-makeslog(data,logbook,"id21",index,"besoin_bna","Tous les articles non alimentaires cites sont disponibles mais pas de marche a distance de marche dans la localite")
index<-pulluuid(data, data$marche_maintenant=="oui"&data$savon_difficultes=="marches_non_fonctionnels")
logbook<-makeslog(data,logbook,"id22",index,"savon_difficultes","Le marche ne fonctionne pas alors que la reponse a la question concernant la presence d'un marche fontionnel est : oui")
index<-pulluuid(data, data$info_source=="appel_telephone"&data$tel_mobile=="non")
logbook<-makeslog(data,logbook,"id23",index,"tel_mobile","Pour la majorite de la population la pricipale source d'information est : telephone alors qu'a la question concernant l'acces aux telephones la reponse est non")
index<-pulluuid(data, data$info_source=="facebook"&data$tel_mobile=="non")
logbook<-makeslog(data,logbook,"id23",index,"tel_mobile","Pour la majorite de la population la pricipale source d'information est :Medias sociaux (Facebook, Whatsapp, etc.) / internet alors qu'a la question concernant l'acces aux telephones la reponse est non")
index<-pulluuid(data, data$info_source=="internet"&data$tel_mobile=="non")
logbook<-makeslog(data,logbook,"id23",index,"tel_mobile","Pour la majorite de la population la pricipale source d'information est :internet alors qu'a la question concernant l'acces aux telephones la reponse est non")
index<-pulluuid(data, data$info_source=="telephone_sat"&data$tel_mobile=="non")
logbook<-makeslog(data,logbook,"id23",index,"tel_mobile","Pour la majorite de la population la pricipale source d'information est :internet alors qu'a la question concernant l'acces aux telephones la reponse est non")
index<-pulluuid(data, data$reseau_mobile=="oui"&data$info_obstacle1=="reseau_mobile_limite")
logbook<-makeslog(data,logbook,"id24",index,"reseau_mobile","Reponse reseau_mobile_limite alors que la reponse à l question de savoir si le reseau telephonique mobile stable etait disponible est oui")
index<-pulluuid(data, data$reseau_mobile=="oui"&data$info_obstacle1=="pas_reseau_mobile")
logbook<-makeslog(data,logbook,"id24",index,"reseau_mobile","Reponse pas_reseau_mobile alors que la reponse à l question de savoir si le reseau telephonique mobile stable etait disponible est oui")
index<-pulluuid(data, data$source_eau=="robinet_maison"&data$eau_maintenant_distance!="moins_30_min")
logbook<-makeslog(data,logbook,"id24",index,"eau_maintenant_distance","Source eau est robinet de la maison mais la distance a la source d'eau est > 30min")
# duplicated uuid
index<-pulluuid(data,duplicated(data$uuid))
logbook<- makeslog(data,logbook,"id25",index,"uuid","UUID doublons")
index<-pulluuid(data,data$assistance=="non"&data$nourriture_source=="ong")
logbook<- makeslog(data,logbook,"id26",index,"assistance","L'IC a signale la presence d'une assistance alimentaire dans la localite dans la question nourriture_source")
index<-pulluuid(data,data$nourriture_maintenant=="oui"&data$nourriture_source=="ong")
logbook<- makeslog(data,logbook,"id27",index,"nourriture_source","La source de nourriture est Aide humanitaire/aide alimentaire gouvernementale alors qu'il a dit que les gens ont suffisamment à manger")
if(pays!="niger"){
index<-pulluuid(data,data$sante_maintenant=="oui"&data$nutri=="non")
logbook<- makeslog(data,logbook,"id28",index,"nutri","Présence de services de santé accessibles mais pas de Programmes nutritionnels mis en oeuvre")
} else{
index<-pulluuid(data,data$sante_maintenant=="oui"&data$nutri=="non"&composr::sm_selected(data$services_sante_niger, any = c("csi_i","csi_ii","hd","chr","hr","chu")))
logbook<- makeslog(data,logbook,"id28",index,"nutri","Présence de services de santé accessibles mais pas de Programmes nutritionnels mis en oeuvre")
}
index<-pulluuid(data,data$distr_nourriture=="oui"&data$assistance=="non")
logbook<- makeslog(data,logbook,"id29",index,"assistance","une partie de la population n'a pas reçu une assistance humanitaire ? alors que Au cours des 30 derniers jours, y a des personnes qui ont reçu une assistance alimentaire")
index<-pulluuid(data,data$nourriture_source=="ong"&composr::sm_selected(data$pas_nourriture_raison,any = c("distrib_arretes")))
logbook<- makeslog(data,logbook,"id30",index,"pas_nourriture_raison","Dons humanitaires / de l'Etat comme principale source de nourriture alors que Les distributions alimentaires n'ont plus lieu")
index<-pulluuid(data,data$pdi_pourcent=="tous"|data$retournes_pourcent=="tous"|data$refugies_pourcent=="tous"|data$rapatries_pourcent=="tous"&composr::sm_selected(data$groupes_presents,none = c("non_deplaces")))
logbook<- makeslog(data,logbook,"id31",index,"groupes_presents","Proportion des PDIs ou Retournés ou Réfugiées est 'Tous/Toutes' or il doit y avoir la population locale")
index<-pulluuid(data,composr::sm_selected(data$groupes_presents,none = c("non_deplaces")))
logbook<- makeslog(data,logbook,"id32",index,"groupes_presents","group de population 'non_deplace' n'est pas present dans cette localité")
index<-pulluuid(data,data$info_source=="radio"&data$info_source_qui%!in%c("journaliste","chef_communautaire","chef_religieux","autorite_locale"))
logbook<- makeslog(data,logbook,"id33",index,"info_source","Le canal d'information est 'Station de radio' mais les fournisseurs d'information sont canaux d'information directs")
index<-pulluuid(data,data$moyens_existence_obstacle=="non"&data$moyens_existence_obstacle_raison=="insecurite"&data$prot_maintenant=="oui")
logbook<- makeslog(data,logbook,"id34",index,"prot_maintenant","ous aviez mentionné que les gens n'ont pas accès à leur moyen d'existence pour raison d'insécurité et vous ajouté qu'ils se sont sentis en sécurité")
index<-pulluuid(data,composr::sm_selected(data$revenu_source,any = c("dons_humanitaire"))&data$distr_nourriture=="non")
logbook<- makeslog(data,logbook,"id35",index,"revenu_source","Source de revenu Dons humanitaires / de l'Etat alors qu'il n y a pas eu d'assistance humanitaire dans la localité")
return(logbook)
}
source('C:/Users/Admin/Desktop/Hedi/github/HSM3frontieres/R/cleaning_functions.R')
library(readxl)
survey <- read_excel("C:/Users/Admin/Desktop/Nouveau dossier/3F 02-2021/REACH REG1903b 3F - Outil multisectoriel_2021-02.xlsx")
View(survey)
library(readxl)
choices <- read_excel("C:/Users/Admin/Desktop/Nouveau dossier/3F 02-2021/REACH REG1903b 3F - Outil multisectoriel_2021-02.xlsx",
sheet = "choices")
View(choices)
time_check<-survey_tonext_check(filter(db,info_pays=="niger"))
autre_check<-other_check(filter(db,info_pays=="niger"),survey)
logbook<-apply_checks(filter(db,info_pays=="niger"),"niger")
logbook<-data.frame(
today=character(),
base= character(),
enumerator= character(),
uuid= character(),
question.name = character(),
old.value = character(),
new.value = character(),
parent.other.question = character(),
parent.other.answer = character(),
probleme = character(),
checkid= character(),
action=character()
)
sm_autre <- names(db)[grep(".[.]autre", names(db))]
sm_nsp <- names(db)[grep(".[.](nsp|ne_sait_pas|je_ne_sais_pas)", names(db))]
sm_dwta <- names(db)[grep(".[.](prefere_pas|ne_souhaite_pas_repondre|je_prefere_ne_pas_repondre|sans_reponse)", names(db))]
# new variables
data<-db
data$difftime<-calc_duration(data)
##Transversal (nsp)
data$nb_nsp <-apply(data,1,function(x) {grep("nsp|ne_sait_pas|je_ne_sais_pas",x) %>%  unlist %>% length}) +apply(data[sm_nsp],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_nsp>3)
logbook<- makeslog(data,logbook,"id02",index, "nb_nsp", "Nombre important de reponses nsp par enqueteur")
##Transversal (sans_reponse)
data$nb_dwta <-apply(data,1,function(x) {grep("prefere_pas|sans_reponse",x) %>%  unlist %>% length}) +apply(data[sm_dwta],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_dwta>3)
logbook<- makeslog(data,logbook,"id03",index, "nb_dwta", "Nombre important de reponses sans_reponse par enqueteur")
##Transversal (autre)
data$nb_autre <-apply(data,1,function(x) {grep("autre",x) %>%  unlist %>% length}) + apply(data[sm_autre],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_autre>3)
logbook<- makeslog(data,logbook,"id04",index, "nb_autre", "Nombre important de reponses autre par enqueteur")
##Transversal (autre)
data$nb_autre <-apply(data,1,function(x) {grep("autre",x) %>%  unlist %>% length}) + apply(data[sm_autre],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_autre>3)
logbook<- makeslog(data,logbook,"id04",index, "nb_autre", "Nombre important de reponses autre par enqueteur")
##Transversal (autre)
data$nb_autre <-apply(data,1,function(x) {grep("autre",x) %>%  unlist %>% length}) + apply(data[sm_autre],1,sum,na.rm=T)
# new variables
data<-db
data$difftime<-calc_duration(data)
##Transversal (nsp)
data$nb_nsp <-apply(data,1,function(x) {grep("nsp|ne_sait_pas|je_ne_sais_pas",x) %>%  unlist %>% length}) +apply(data[sm_nsp],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_nsp>3)
logbook<- makeslog(data,logbook,"id02",index, "nb_nsp", "Nombre important de reponses nsp par enqueteur")
##Transversal (sans_reponse)
data$nb_dwta <-apply(data,1,function(x) {grep("prefere_pas|sans_reponse",x) %>%  unlist %>% length}) +apply(data[sm_dwta],1,sum,na.rm=T)
index<-pulluuid(data,data$nb_dwta>3)
logbook<- makeslog(data,logbook,"id03",index, "nb_dwta", "Nombre important de reponses sans_reponse par enqueteur")
##Transversal (autre)
data$nb_autre <-apply(data,1,function(x) {grep("autre",x) %>%  unlist %>% length}) + apply(data[sm_autre],1,sum,na.rm=T)
sm_autre
apply(data[sm_autre],1,sum,na.rm=T)
sm_autre
data[sm_dwta]
apply(data[sm_dwta],1,sum,na.rm=T)
data[sm_autre]
apply(data[sm_autre],1,sum,na.rm=T)
other_check
sm_autre
db2<-db[,str_detect(names(db),"Si..autre...veuillez.précisez.s.il.vous.plait")]
str_detect(names(db),"Si..autre...veuillez.précisez.s.il.vous.plait")
table(str_detect(names(db),"Si..autre...veuillez.précisez.s.il.vous.plait"))
db2<-db[,!str_detect(names(db),"Si..autre...veuillez.précisez.s.il.vous.plait")]
db<-db2
time_check<-survey_tonext_check(filter(db(),info_pays==input$pays))
time_check<-survey_tonext_check(filter(db,info_pays=="niger"))
autre_check<-other_check(filter(db,info_pays=="niger"),survey)
logbook<-apply_checks(filter(db,info_pays=="niger"),"niger")
clog<-bind_rows(logbook,autre_check,time_check)
shiny::p
??shiny::p
library(shiny)
devtools::load_all()
rsconnect::deployApp(appDir = ".", account = "impact-initiatives", forceUpdate = T)
usethis::use_description()
devtools::load_all()
rsconnect::deployApp(appDir = ".", account = "impact-initiatives", forceUpdate = T)
clean_pcode<-function(x){
iconv(x, to='ASCII//TRANSLIT') %>% tolower(.) %>% gsub("[^a-z0-9_]", "\\_", .) %>% gsub("^X_|^_|_$","",.) %>% gsub('([_])\\1+', '\\1',.)
}
clean_pcode<-function(x){
stri_trans_general(x, "Latin-ASCII") %>% tolower(.) %>% gsub("[^a-z0-9_]", "\\_", .) %>% gsub("^X_|^_|_$","",.) %>% gsub('([_])\\1+', '\\1',.)
}
devtools::load_all()
survey_tonext_check
usethis::use_description()
devtools::load_all()
library(shiny)
devtools::load_all()
rsconnect::deployApp(appDir = ".",account = "impact-initiatives",forceUpdate = T)
devtools::load_all()
usethis::use_description()
devtools::load_all()
library(shiny)
devtools::load_all()
H2R_HSM()
cleaning_data
library(readxl)
db <- read_excel("C:/Users/Admin/Downloads/raw_data_mars.xlsx")
View(db)
library(readxl)
clog <- read_excel("C:/Users/Admin/Downloads/clean_log_final.xlsx")
View(clog)
library(readxl)
survey <- read_excel("Z:/1_REACH_NIGER/02_Project_Management/2021/2021_3Frontieres/06_Data_Collection_Tools/02_Outils quantitatifs/2021-04/REACH REG1903b 3F - Outil multisectoriel_2021-04_VF.xlsx")
View(survey)
library(readxl)
choices <- read_excel("Z:/1_REACH_NIGER/02_Project_Management/2021/2021_3Frontieres/06_Data_Collection_Tools/02_Outils quantitatifs/2021-04/REACH REG1903b 3F - Outil multisectoriel_2021-04_VF.xlsx",
sheet = "choices")
View(choices)
db<-db()[which(!is.na(db()$uuid)),]
db<-db[which(!is.na(db$uuid)),]
db$uuid
library(readxl)
db <- read_excel("C:/Users/Admin/Downloads/raw_data_mars.xlsx")
View(db)
db<-db %>% prepdata(.,slashtodot = T)
db$uuid
db<-db[which(!is.na(db$uuid)),]
cleaning_data
impl_clean
debugonce(impl_clean)
db %>% impl_clean("uuid",clog,"uuid","question.name","new.value","old.value","action","parent.other.question")
nrow(dclean)
for (k in 1:nrow(dclean))
)
for (k in 1:nrow(dclean))
{
print(k)
Taction<-dclean[[action]][k]
x1<-as.character(dclean[[uuid_log]][k])
if(any(data[[uuid]]==x1)){
if(!is.na(Taction)&Taction!="note"&Taction!="nothing"&Taction!="check"){
if(Taction=="remove"){
data<-data[which(!data[[uuid]]%in%dclean[[uuid_log]][k]),]
} else if(Taction=="recode_all"){
data[[dclean[[qmname]][k]]][data[[dclean[[qmname]][k]]]==dclean[[oldval]][k]]<-dclean[[newval]][k]
} else if(Taction=="recode"){
X<-as.character(dclean[[uuid_log]][k])
Y<-as.character(dclean[[othermain]][k])
val<-dclean[[newval]][k]
data[[Y]]<-as.character(data[[Y]])
# data[which(data[[uuid]]==X),which(names(data)==Y)]<-as.character(val)
data[[Y]][which(data[[uuid]]==X)]<-as.character(val)
# } else if(Taction=="recode_sm"){
#   X<-as.character(dclean[[uuid_log]][k])
#   Y<-as.character(dclean[[othermain]][k])
#   val<-dclean[[othertextvar]][k]
#   data[[Y]]<-as.character(data[[Y]])
#   data[which(data[[uuid]]==X),which(names(data)==Y)]<-gsub("autre",as.character(val),data[which(data[[uuid]]==X),which(names(data)==Y)])
# } else if(Taction=="append_sm"){
#   X<-as.character(dclean[[uuid_log]][k])
#   Y<-as.character(dclean[[othermain]][k])
#   val<-dclean[[othertextvar]][k]
#   if(data[which(data[[uuid]]==X),which(names(data)==Y)]=="NA"|is.na(data[which(data[[uuid]]==X),which(names(data)==Y)])){
#     data[which(data[[uuid]]==X),which(names(data)==Y)]<-as.character(val)
#   } else {
#     data[which(data[[uuid]]==X),which(names(data)==Y)]<-paste0(data[which(data[[uuid]]==X),which(names(data)==Y)]," ",as.character(val))
#   }
} else if(Taction=="change") {
X<-as.character(dclean[[uuid_log]][k])
Y<-as.character(dclean[[qmname]][k])
val<-dclean[[newval]][k]
data[[Y]]<-as.character(data[[Y]])
data[[Y]][which(data[[uuid]]==X)]<-as.character(val)
}
#
# if(!is.na(dclean[[variabletoclean]][k])){
#   Ytoclean<-dclean[[variabletoclean]][k]
#   valtoclean<-dclean[[choicestoclean]][k]
#   data[,which(names(data)==Ytoclean)]<-as.character(data[,which(names(data)==Ytoclean)])
#   data[which(data[[uuid]]==X),which(names(data)==Ytoclean)]<-as.character(valtoclean)
# }
}
}
}
k=3
print(k)
Taction<-dclean[[action]][k]
x1<-as.character(dclean[[uuid_log]][k])
Taction
x1
any(data[[uuid]]==x1)
!is.na(Taction)&Taction!="note"&Taction!="nothing"&Taction!="check"
Taction=="remove"
Taction=="recode_all"
Taction=="recode"
Taction=="change"
Taction!="check"
for (k in 1:nrow(dclean))
)
for (k in 1:nrow(dclean))
{
print(k)
Taction<-dclean[[action]][k]
x1<-as.character(dclean[[uuid_log]][k])
if(any(data[[uuid]]==x1)){
if(!is.na(Taction)&Taction!="note"&Taction!="nothing"&Taction!="check"){
if(Taction=="remove"){
data<-data[which(!data[[uuid]]%in%dclean[[uuid_log]][k]),]
} else if(Taction=="recode_all"){
data[[dclean[[qmname]][k]]][data[[dclean[[qmname]][k]]]==dclean[[oldval]][k]]<-dclean[[newval]][k]
} else if(Taction=="recode"){
X<-as.character(dclean[[uuid_log]][k])
Y<-as.character(dclean[[othermain]][k])
val<-dclean[[newval]][k]
data[[Y]]<-as.character(data[[Y]])
# data[which(data[[uuid]]==X),which(names(data)==Y)]<-as.character(val)
data[[Y]][which(data[[uuid]]==X)]<-as.character(val)
# } else if(Taction=="recode_sm"){
#   X<-as.character(dclean[[uuid_log]][k])
#   Y<-as.character(dclean[[othermain]][k])
#   val<-dclean[[othertextvar]][k]
#   data[[Y]]<-as.character(data[[Y]])
#   data[which(data[[uuid]]==X),which(names(data)==Y)]<-gsub("autre",as.character(val),data[which(data[[uuid]]==X),which(names(data)==Y)])
# } else if(Taction=="append_sm"){
#   X<-as.character(dclean[[uuid_log]][k])
#   Y<-as.character(dclean[[othermain]][k])
#   val<-dclean[[othertextvar]][k]
#   if(data[which(data[[uuid]]==X),which(names(data)==Y)]=="NA"|is.na(data[which(data[[uuid]]==X),which(names(data)==Y)])){
#     data[which(data[[uuid]]==X),which(names(data)==Y)]<-as.character(val)
#   } else {
#     data[which(data[[uuid]]==X),which(names(data)==Y)]<-paste0(data[which(data[[uuid]]==X),which(names(data)==Y)]," ",as.character(val))
#   }
} else if(Taction=="change") {
X<-as.character(dclean[[uuid_log]][k])
Y<-as.character(dclean[[qmname]][k])
val<-dclean[[newval]][k]
data[[Y]]<-as.character(data[[Y]])
data[[Y]][which(data[[uuid]]==X)]<-as.character(val)
}
#
# if(!is.na(dclean[[variabletoclean]][k])){
#   Ytoclean<-dclean[[variabletoclean]][k]
#   valtoclean<-dclean[[choicestoclean]][k]
#   data[,which(names(data)==Ytoclean)]<-as.character(data[,which(names(data)==Ytoclean)])
#   data[which(data[[uuid]]==X),which(names(data)==Ytoclean)]<-as.character(valtoclean)
# }
}
}
}
impl_clean<-function(data,uuid,dclean,uuid_log,qmname,newval,oldval,action,othermain){
for (k in 1:nrow(dclean))
{
print(k)
Taction<-dclean[[action]][k]
x1<-as.character(dclean[[uuid_log]][k])
if(any(data[[uuid]]==x1)){
if(!is.na(Taction)&Taction!="note"&Taction!="nothing"&Taction!="check"){
if(Taction=="remove"){
data<-data[which(!data[[uuid]]%in%dclean[[uuid_log]][k]),]
} else if(Taction=="recode_all"){
data[[dclean[[qmname]][k]]][data[[dclean[[qmname]][k]]]==dclean[[oldval]][k]]<-dclean[[newval]][k]
} else if(Taction=="recode"){
X<-as.character(dclean[[uuid_log]][k])
Y<-as.character(dclean[[othermain]][k])
val<-dclean[[newval]][k]
data[[Y]]<-as.character(data[[Y]])
# data[which(data[[uuid]]==X),which(names(data)==Y)]<-as.character(val)
data[[Y]][which(data[[uuid]]==X)]<-as.character(val)
# } else if(Taction=="recode_sm"){
#   X<-as.character(dclean[[uuid_log]][k])
#   Y<-as.character(dclean[[othermain]][k])
#   val<-dclean[[othertextvar]][k]
#   data[[Y]]<-as.character(data[[Y]])
#   data[which(data[[uuid]]==X),which(names(data)==Y)]<-gsub("autre",as.character(val),data[which(data[[uuid]]==X),which(names(data)==Y)])
# } else if(Taction=="append_sm"){
#   X<-as.character(dclean[[uuid_log]][k])
#   Y<-as.character(dclean[[othermain]][k])
#   val<-dclean[[othertextvar]][k]
#   if(data[which(data[[uuid]]==X),which(names(data)==Y)]=="NA"|is.na(data[which(data[[uuid]]==X),which(names(data)==Y)])){
#     data[which(data[[uuid]]==X),which(names(data)==Y)]<-as.character(val)
#   } else {
#     data[which(data[[uuid]]==X),which(names(data)==Y)]<-paste0(data[which(data[[uuid]]==X),which(names(data)==Y)]," ",as.character(val))
#   }
} else if(Taction=="change") {
X<-as.character(dclean[[uuid_log]][k])
Y<-as.character(dclean[[qmname]][k])
val<-dclean[[newval]][k]
data[[Y]]<-as.character(data[[Y]])
data[[Y]][which(data[[uuid]]==X)]<-as.character(val)
}
#
# if(!is.na(dclean[[variabletoclean]][k])){
#   Ytoclean<-dclean[[variabletoclean]][k]
#   valtoclean<-dclean[[choicestoclean]][k]
#   data[,which(names(data)==Ytoclean)]<-as.character(data[,which(names(data)==Ytoclean)])
#   data[which(data[[uuid]]==X),which(names(data)==Ytoclean)]<-as.character(valtoclean)
# }
}
}
}
return(data)
}
db %>% impl_clean("uuid",clog,"uuid","question.name","new.value","old.value","action","parent.other.question")
k=209
Taction<-dclean[[action]][k]
debugonce(impl_clean)
clean<-db %>% impl_clean("uuid",clog,"uuid","question.name","new.value","old.value","action","parent.other.question")
k=209
Taction<-dclean[[action]][k]
x1<-as.character(dclean[[uuid_log]][k])
Taction
x1
any(data[[uuid]]==x1)
!is.na(Taction)&Taction!="note"&Taction!="nothing"&Taction!="check"
Taction=="remove"
X<-as.character(dclean[[uuid_log]][k])
Y<-as.character(dclean[[qmname]][k])
X
Y
library(readxl)
clog <- read_excel("C:/Users/Admin/Downloads/clean_log_final.xlsx")
View(clog)
clean<-db %>% impl_clean("uuid",clog,"uuid","question.name","new.value","old.value","action","parent.other.question")
db<- cleaning_data(db,clog,survey,choices)
library(readxl)
db <- read_excel("C:/Users/Admin/Downloads/Book1.xlsx")
View(db)
rm(list = ls())
library(readxl)
db <- read_excel("C:/Users/Admin/Downloads/Book1.xlsx")
View(db)
library(readxl)
checks <- read_excel("Z:/1_REACH_NIGER/02_Project_Management/2021/2021_3Frontieres/06_Data_Collection_Tools/02_Outils quantitatifs/2021-04/renaming_log.xlsx")
View(checks)
check<-checks
for(i in 1:nrow(check)){
qname<-check$qname[i]
old.value<-check$old.value[i]
new.value<-check$new.value[i]
db[[qname]]<-gsub(old.value,new.value,db[[qname]])
if(check$sm_question[i]=="yes"){
names(db)[which(names(db)==paste0(qname,".",old.value))]<-paste0(qname,".",new.value)
}
}
rm(list = ls())
db <- read_excel("C:/Users/Admin/Downloads/Book1.xlsx")
check <- read_excel("Z:/1_REACH_NIGER/02_Project_Management/2021/2021_3Frontieres/06_Data_Collection_Tools/02_Outils quantitatifs/2021-04/renaming_log.xlsx")
for(i in 1:nrow(check)){
qname<-check$qname[i]
print(qname)
old.value<-check$old.value[i]
new.value<-check$new.value[i]
db[[qname]]<-gsub(old.value,new.value,db[[qname]])
if(check$sm_question[i]=="yes"){
names(db)[which(names(db)==paste0(qname,".",old.value))]<-paste0(qname,".",new.value)
}
}
rm(list = ls())
aggregation
H2R_HSM()
settlement_agg
H2R_HSM()
H2R_HSM()
H2R_HSM()
H2R_HSM()
devtools::load_all()
library(shiny)
devtools::load_all()
H2R_HSM()
devtools::load_all()
H2R_HSM()
H2R_HSM()
